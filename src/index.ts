#!/usr/bin/env tsx

import * as cheerio from 'cheerio';
import { Command } from 'commander';
import { writeFile } from 'fs/promises';
import * as path from 'path';

const program = new Command();

program
  .name('web-scraper')
  .description(
    'CLI tr√≠ch xu·∫•t n·ªôi dung t·ª´ web b·∫±ng CSS selector v√† l∆∞u k·∫øt qu·∫£ ra file'
  )
  .argument('<url>', 'URL trang web')
  .argument('<selectors...>', 'M·ªôt ho·∫∑c nhi·ªÅu CSS selector')
  .option('-o, --output <file>', 'T√™n file ƒë·ªÉ l∆∞u k·∫øt qu·∫£', 'results.json')
  .action(
    async (url: string, selectors: string[], options: { output: string }) => {
      try {
        const res = await fetch(url);
        if (!res.ok) throw new Error(`L·ªói HTTP ${res.status}`);

        const html = await res.text();
        const $ = cheerio.load(html);

        // Thu th·∫≠p k·∫øt qu·∫£ cho t·ª´ng selector
        const results: Record<string, string[]> = {};

        selectors.forEach((selector) => {
          const elements = $(selector);
          results[selector] = [];

          if (elements.length === 0) {
            results[selector].push('‚ùå Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ n√†o.');
          } else {
            elements.each((i, el) => {
              results[selector].push($(el).text().trim());
            });
          }
        });

        // L∆∞u k·∫øt qu·∫£ ra file JSON
        const outputPath = path.resolve(process.cwd(), options.output);
        await writeFile(outputPath, JSON.stringify(results, null, 2), 'utf-8');
        console.log(`‚úÖ ƒê√£ l∆∞u k·∫øt qu·∫£ v√†o file: ${outputPath}`);
      } catch (err) {
        console.error('üö® L·ªói:', (err as Error).message);
      }
    }
  );

program.parse();
